# import des librairies n√©cessaires 
# ici streamlit est utilis√©e pour cr√©er une application web interactive
import streamlit as st
from datetime import datetime
# on importe √©galement les fonctions cr√©es au sein du notebook pr√©c√©dent
from notebook_functions import predire_matchs, equipes

# configuration initiale de la page
st.set_page_config(page_title='PremierPredict', page_icon='‚öΩÔ∏è', layout='wide', initial_sidebar_state='expanded')

# titre principal de l'application et noms des membres de l'√©quipe et ajout de d√©tails sur le projet
st.markdown('## ‚öΩÔ∏è PremierPredict : *Pr√©dictions des matchs de la Premier League*')
url = 'https://ghj95.github.io/portfolio//'
st.markdown(
    f"<a href='{url}' target='_blank' style='text-decoration: none; color: inherit;'>`Par : Gabriel Hardy-Joseph`</a>",
    unsafe_allow_html=True,
)
st.markdown(
    "<span style='text-decoration: none;'><code style='color: inherit;'>Projet r√©alis√© dans le cadre du cours TECH20704</code></span>",
    unsafe_allow_html=True,
)

# d√©finition d'une fonction pour afficher les informations sur le fonctionnement de l'application
def appinfo():
    # premier conteneur expliquant le mod√®le et ses donn√©es d'entra√Ænement avec st.container
    with st.container(border=True):
        st.write("Cette application s'appuie sur un mod√®le de classification **Extreme Gradient Boosting (XGBoost)** entra√Æn√© sur 25 ans de r√©sultats historiques (2000-2025). Les pr√©dictions int√®grent la *forme r√©cente des √©quipes*, l'*analyse statistique des matchs pr√©c√©dents* et l'*historique des confrontations directes* entre les clubs. Essayez-la!")
    # second conteneur avec un avertissement sur la fiabilit√© des pr√©dictions
    with st.container(border=True):
        st.write('Les pr√©dictions du mod√®le ne sont pas des certitudes.')

# ajout d'un titre dans la barre lat√©rale pour les informations √† saisir avec la m√©thode st.sidebar
st.sidebar.header('D√©tails du match')

# d√©finition d'une fonction pour recueillir les entr√©es de l'utilisateur
def input_features():
    # s√©lection de l'√©quipe jouant √† domicile via une liste d√©roulante avec la m√©thode .selectbox
    domicile = st.sidebar.selectbox('√âquipe √† domicile :', (equipes), index=None, placeholder='S√©l√©ctionez une √©quipe...')
    # s√©lection de l'√©quipe jouant √† l'ext√©rieur via une autre liste d√©roulante
    exterieur = st.sidebar.selectbox("√âquipe √† l'ext√©rieur :", (equipes), index=None, placeholder='S√©l√©ctionez une √©quipe...')
    # s√©lection de la date du match avec la date du jour comme valeur par d√©faut avec la m√©thode .date_input
    match_date = st.sidebar.date_input('Date du match :', datetime.today())
    return domicile, exterieur, match_date

# r√©cup√©ration des choix de l'utilisateur via la fonction pr√©c√©dente par unpacking
domicile, exterieur, match_date = input_features()

# appel de la fonction pour afficher les informations sur l'application
appinfo()
'---'
    
# on initialise la variable qui contiendra la pr√©diction
prediction = None
# ajout d'un bouton dans la barre lat√©rale pour d√©clencher la pr√©diction
if st.sidebar.button('Pr√©dire'):
    # on cr√©e maintenant une liste de conditions pour s'assurer que les entr√©es des utilisateurs sont valides avec une s√©rie de v√©rifications
    # on assume par d√©faut que les entr√©es sont valides
    valid_input = True
    # v√©rification que les √©quipes s√©lectionn√©es font partie de la liste des √©quipes disponibles
    if domicile and exterieur not in equipes:
        st.error('Veuillez s√©l√©ctionner deux √©quipes parmi celles dans la liste')
        valid_input = False
    # v√©rification que l'utilisateur n'a pas s√©lectionn√© la m√™me √©quipe deux fois (domicile et ext√©rieur)
    if domicile == exterieur:
        st.error('Veuillez s√©lectionner deux √©quipes diff√©rentes')
        valid_input = False
    # v√©rification que la date n'est pas trop √©loign√©e dans le futur pour garantir la pertinence de la pr√©diction
    if match_date.year > datetime.today().year + 1:
        st.error('Veuillez s√©lectionner une date moins √©loign√©e')
        valid_input = False
    # v√©rification que la date n'est pas trop ancienne pour garantir la pertinence de la pr√©diction
    if match_date.year < datetime.today().year - 1:
        st.error('Veuillez s√©lectionner une date moins √©loign√©e')
        valid_input = False
    
    # si toutes les v√©rifications sont pass√©es avec succ√®s, on effectue la pr√©diction
    if valid_input:
        # affichage d'un indicateur de chargement pendant le calcul de la pr√©diction avec la m√©thode st.spinner
        with st.spinner('Chargement des pr√©dictions...'):
            # appel de la fonction de pr√©diction avec les param√®tres fournis par l'utilisateur
            prediction, prob = predire_matchs(domicile, exterieur, match_date)

    # affichage du r√©sultat de la pr√©diction avec formatage pour mettre en √©vidence l'√©quipe gagnante et le pourcentage de confiance
    if prediction == 0:
        # cas d'une victoire pr√©dite pour l'√©quipe ext√©rieure
        st.success(f'Le mod√®le pr√©dit une victoire de **{exterieur}** √† **{prob[0, 0]:.0%}**!', icon='üéØ')
    elif prediction == 1:
        # cas d'une victoire pr√©dite pour l'√©quipe √† domicile
        st.success(f'Le mod√®le pr√©dit une victoire de **{domicile}** **{prob[0, 1]:.0%}**!', icon='üéØ')
    else:
        # cas d'un match nul pr√©dit
        st.success(f'Le mod√®le pr√©dit un match nul √† **{prob[0, 2]:.0%}**!', icon='üéØ')